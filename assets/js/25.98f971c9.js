(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{441:function(a,t,s){"use strict";s.r(t);var n=s(2),r=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"多线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[a._v("#")]),a._v(" 多线程")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("线程 A 与线程 B 之间如要通信的话，必须要经历下面 2 个步骤：")]),a._v(" "),t("ul",[t("li",[a._v("首先，线程 A 把本地内存 A 中更新过的共享变量刷新到主内存中去。")]),a._v(" "),t("li",[a._v("然后，线程 B 到主内存中去读取线程 A 之前已更新过的共享变量。")])])]),a._v(" "),t("li",[t("p",[a._v("多线程的出现是要解决什么问题的? 本质什么?")])])]),a._v(" "),t("blockquote",[t("p",[a._v("CPU、内存、I/O 设备的速度是有极大差异的，为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系结构、操作系统、编译程序都做出了贡献，主要体现为:")]),a._v(" "),t("ul",[t("li",[a._v("CPU 增加了缓存，以均衡与内存的速度差异；// 导致可见性问题")]),a._v(" "),t("li",[a._v("操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；// 导致原子性问题")]),a._v(" "),t("li",[a._v("编译程序优化指令执行次序，使得缓存能够得到更加合理地利用。// 导致有序性问题")])])]),a._v(" "),t("ul",[t("li",[a._v("**创建线程的方式：**1.继承Thread类，重写该类的run方法、2.实现Runnable接口，并重写该接口的run方法、3.实现Callable接口，并重写该接口的call方法，配合Future使用、4.线程池方式")]),a._v(" "),t("li",[a._v("**Runnable和Callable的区别：**Runnable的run方法没有返回值，且不可以继续上抛异常，Callable的Call方法有返回值，配合Future或者FutureTask使用，且可以抛出异常")]),a._v(" "),t("li",[a._v("**start和run方法的区别：**start方法可以启动一个新的线程，run方法只是一个类的普通方法，不会启动一个新的线程，仍然走的是主线程；start方法不能被重复调用，run方法可以")]),a._v(" "),t("li",[a._v("**线程和进程的区别：**进程是操作系统资源分配的基本单位，而线程是处理器任务调度和执行的基本单位")]),a._v(" "),t("li",[a._v("**并发和并行的区别：**吃饭吃到一半，电话来了，你吃完饭再去接电话，这是串行；吃饭吃到一半，电话来了，你接完了电话，然后继续吃饭，这是并发；吃饭吃到一半，电话来了，你一边打电话一边吃饭，这是并行；所以并发和并行的区别在于是否同时")]),a._v(" "),t("li",[a._v("并发三要素\n"),t("ul",[t("li",[a._v("原子性：一个不可再分割的颗粒，即指一个或多个操作要么全部成功，要么全部失败。如x=10这是原子操作，y=x不是原子操作，它要先读x的值然后再赋值给y\n"),t("blockquote",[t("ul",[t("li",[a._v("在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行")])])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("      x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//语句1: 直接将数值10赋值给x，也就是说线程执行这个语句的会直接将数值10写入到工作内存中")]),a._v("\n      y "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//语句2: 包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及 将x的值写入工作内存 这2个操作都是原子性操作，但是合起来就不是原子性操作了。")]),a._v("\n      x"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//语句3： x++包括3个操作：读取x的值，进行加1操作，写入新的值。")]),a._v("\n      x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//语句4： 同语句3")]),a._v("\n```java \n")])])])]),a._v(" "),t("li",[a._v("可见性：一个线程对共享变量的修改，其他线程能够立刻看见")]),a._v(" "),t("li",[a._v("有序性：程序执行的顺序按照代码的先后顺序执行（指令重排：处理器为了提高程序运行效率，会根据指令之间的数据依赖性，可能会对指令进行重新排序）")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);