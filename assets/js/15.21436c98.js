(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{430:function(v,_,l){"use strict";l.r(_);var i=l(2),n=Object(i.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"分布式事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[v._v("#")]),v._v(" 分布式事务")]),v._v(" "),_("ul",[_("li",[v._v("CAP原理\n"),_("ul",[_("li",[v._v("C（一致性）：对某个指定的客户端来说，读操作可以返回最新的写操作的结果。对于数据分布在不同节点上的数据，如果某个节点更新了数据，其他节点都能读取到这个最新的数据，那么就称为强一致性，如果某个节点没有读到，那就是分布式不一致")]),v._v(" "),_("li",[v._v("A（可用性）：非故障节点在合理的时间返回合理的响应（不是错误和超时的响应）")]),v._v(" "),_("li",[v._v("P（分区容错性）：分布式系统出现网络分区后，仍然能够对外提供服务")]),v._v(" "),_("li",[v._v("网络分区：分布式系统中，多个节点之间的网络是连通的，但是因为某些故障（网络出现问题）某些节点之间不连通了，整个网络分成了几块区域，这种被叫做网络分区")]),v._v(" "),_("li",[v._v("在分布式系统中，网络无法100%可靠，分区是必然现象，如果选择CA而放弃了P，那么当发生分区时，为了保证一致性，这个时候必须拒绝请求，但是A又不允许，所以分布式系统理论上不能选择CA，只能是CP或者AP")])])]),v._v(" "),_("li",[v._v("BASE理论：三要素，基本可用、软状态、最终一致性\n"),_("ul",[_("li",[v._v("基本可用：指分布式系统出现不可预知的故障时，允许损失部分可用性，如响应时间增加，系统的非核心功能不可用")]),v._v(" "),_("li",[v._v("软状态：指系统中的数据存在中间状态，并认为该中间状态不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时")]),v._v(" "),_("li",[v._v("最终一致性：强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态，而不是保证实时一致性\n"),_("ul",[_("li",[v._v("强一致性：系统写入了什么，读出来的就是什么")]),v._v(" "),_("li",[v._v("弱一致性：不一定可以读取到最新写入的值，也不保证多少时间之后系统读取到的数据是最新的，只是会尽量保证某个时刻达到数据一致性")]),v._v(" "),_("li",[v._v("最终一致性：弱一致性的升级版，系统会保证在一定时间内达到数据一致的状态")])])])])]),v._v(" "),_("li",[v._v("2PC过程\n"),_("ul",[_("li",[v._v("第一阶段，事务管理器要求每个涉及到事务的数据库预提交此操作，并反映时候可以提交")]),v._v(" "),_("li",[v._v("第二阶段，事务管理器要求每个数据库提交数据，或者回滚数据")]),v._v(" "),_("li",[v._v("优点：尽量保证了数据的强一致性，实现成本较低，各大主流数据库都有自己的实现")]),v._v(" "),_("li",[v._v("缺点：单点问题，事务管理器宕机导致数据库无法使用；同步阻塞，在准备就绪后，资源管理器一直处于阻塞状态，直到提交完成；数据不一致，因为网络原因部分资源管理器没有接收到通知提交")])])]),v._v(" "),_("li",[v._v("DTP模型（全局事务）：规定实现分布式事务，需要三种角色，分别为AP、TM、RM\n"),_("ul",[_("li",[v._v("AP：Application 应用系统，就是开发的业务系统，可以使用资源管理器提供的事务接口来实现分布式事务")]),v._v(" "),_("li",[v._v("TM：事务管理器，会提供分布式事务操作接口供业务系统调用，这些接口称为TX接口，通过TX接口来统一管理所有的资源管理器，以实现分布式事务")]),v._v(" "),_("li",[v._v("RM：资源管理器，能够提供数据服务的对象都可以是资源管理器，如数据库、消息中间件、缓存等，资源管理器能提供本地事务能力，通过XA接口将本地事务的提交、回滚能力提供给事务管理器")])])]),v._v(" "),_("li",[v._v("基于可靠消息服务的分布式事务：通过消息中间件的形式来实现分布式事务\n"),_("ul",[_("li",[v._v("在系统A处理任务A之前，首先向消息中间件中发送一条消息")]),v._v(" "),_("li",[v._v("消息中间件收到消息后将该条消息持久化，但并不投递，此时下游系统暂时还不知道该条消息的存在")]),v._v(" "),_("li",[v._v("消息中间件持久化消息后，便向系统A返回一个确认应答")]),v._v(" "),_("li",[v._v("系统A收到确认应答后开始处理任务A")]),v._v(" "),_("li",[v._v("任务A处理完成后向消息中间件提交请求，该请求提交完成后，对于系统A而言，该任务的事务过程已经完成，此时系统A可以处理其他任务")]),v._v(" "),_("li",[v._v("消息中间件收到提交请求后，便向系统B投递该消息，从而触发任务B的执行")]),v._v(" "),_("li",[v._v("当任务B执行完成后，系统B会向中间件返回一个确认应答，告诉消息中间件消费完成，此时该分布式事务完成")]),v._v(" "),_("li",[v._v("使用超时询问机制来防止指令在传输途中被丢失，当消息中间件收到一条事务型消息后便开始计时，如果超时则会主动调用提供的事务询问接口，该接口会返回三种状态，提交状态，回滚状态、处理中，则继续等待")])])]),v._v(" "),_("li",[v._v("TCC\n"),_("ul",[_("li",[v._v("Try阶段：尝试执行，完成所有的业务检查（一致性），预留必须的业务资源（准隔离性）")]),v._v(" "),_("li",[v._v("Confirm阶段：确认执行真正执行业务，不作任何业务检查，只使用Try阶段预留的业务资源，操作满足幂等性，失败后需要进行重试")]),v._v(" "),_("li",[v._v("Cancel阶段：取消执行，释放Try阶段预留的业务资源，Cancel操作也需要满足幂等性，失败后需要进行重试")]),v._v(" "),_("li",[v._v("例子：用100块买水，try阶段，你需要检查你的钱包是否有100块并且锁住这100块，水也是一样的，如果有一个失败，则进行Cancel（释放这100块和水），cancel本身失败会进行重试，如果成功，则进行confirm，确认扣除这100块和这一瓶水被卖，如果confirm本身失败会进行重试")])])])])])}),[],!1,null,null,null);_.default=n.exports}}]);